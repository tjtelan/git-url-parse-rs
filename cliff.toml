# configuration file for git-cliff (0.1.0)

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}](https://github.com/tjtelan/git-url-parse-rs/tree/{{version}}) - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [UNRELEASED]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first | split(pat="\n") | first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true 
# filter out the commits that are not conventional
filter_unconventional = false 

commit_preprocessors = [
    { pattern = "\\(#([0-9]+)\\)", replace = "([#${1}](https://github.com/tjtelan/git-url-parse-rs/issues/${1}))"}
]

# regex for parsing and grouping commits
commit_parsers = [

    { message = ".*[Bb]ump", group = "Noise", skip = true},
    { message = ".*[Rr]evert", group = "Noise", skip = true},
    { message = ".*[Cl]ippy", group = "Noise", skip = true},
    { message = "^Merge pull request", group = "Noise", skip = true},

    { message = "^test", group = "Fixed"},
    { message = "^.*[Ff]ix", group = "Fixed"},
    { message = "^[Rr]esolve", group = "Fixed"},

    { message = "[Cc]ompile", group = "CI"},
    { message = "[Pp]ublish", group = "CI"},

    { message = ".*[Dd]eprecate", group = "Removed"},
    { message = "^[Dd]isable", group = "Removed"},

    { message = ".*[Aa]dd", group = "Added"},
    { message = ".*[Ss]upport", group = "Added"},
    { message = ".*[Mm]ake", group = "Added"},

    { message = ".*[Rr]emove", group = "Removed"},
    { message = ".*[Dd]elete", group = "Removed"},
    { message = ".*[Dd]isable", group = "Removed"},

    { message = "[Rr]elease", group = "CI"},
    { message = ".*[Ll]og", group = "CI"},
    { message = ".*[Bb]uild", group = "CI"},

    { message = ".*[Uu]pdate", group = "Changed"},

    { message = ".*[Cc]lean", group = "Other"},
    { message = ".*[Rr]efactor", group = "Other"},
    { message = "^.*", group = "Other"},

]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = ".*-rc|.*-alpha|.*-beta"
# regex for ignoring tags
ignore_tags = ""
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
